{
	"info": {
		"_postman_id": "dbc5d67f-acd4-4d84-bfe6-a1ccb6440f7e",
		"name": "DivResid",
		"description": "TCC da pós graduação em Engenharia de Software da UFPR 2020",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1 - Security Tests",
			"item": [
				{
					"name": "Signup - Criação de usuário",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "62cc4f39-77e6-4bed-8702-bb7050da1503",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Verificando mensagem de retorno\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Usuário cadastrado com sucesso!\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"postman\",\n\t\"name\":\"postmantest\",\n\t\"email\": \"postman@divresid.com\",\n\t\"password\": \"12345678\",\n\t\"role\": [\"user\"]\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{urlSignup}}",
							"host": [
								"{{urlSignup}}"
							]
						},
						"description": "Request para criar um user.\n\nRoles disponíveis:\n\nAdmin - \"admin\"\nModerador - \"mod\"\nUser - \"user\""
					},
					"response": []
				},
				{
					"name": "Excluir usuário criado",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "62cc4f39-77e6-4bed-8702-bb7050da1503",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"postman\",\n\t\"email\": \"postman@divresid.com\",\n\t\"password\": \"12345678\",\n\t\"role\": [\"user\"]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/auth/deleteTestUser",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"auth",
								"deleteTestUser"
							]
						},
						"description": "Request para criar excluir o usuário criado pelo Postman.\n"
					},
					"response": []
				},
				{
					"name": "Acessando conteúdo público",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "41b5904c-15f6-4f97-a1de-34089f421ac1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/test/all",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"test",
								"all"
							]
						},
						"description": "Requisição para testar acesso ao conteúdo público"
					},
					"response": []
				},
				{
					"name": "Acessando conteúdo restrito",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "84a2a492-8836-4392-9918-3d65e7cf4a38",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Verificando mensagem de retorno\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Error: Unauthorized\");",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/test/user",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"test",
								"user"
							]
						},
						"description": "Requisição para acessar conteúdo restrito sem autenticação."
					},
					"response": []
				},
				{
					"name": "Login - Logando com um usuário administrador",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17e60494-b6e1-4840-b92b-bf21fa0d6f6a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var token = jsonData.accessToken;",
									"postman.setEnvironmentVariable(\"tokenAdmin\", token);",
									"",
									"pm.test(\"Verificando o username do usuário admin\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.username).to.eql(\"admin\");",
									"});",
									"",
									"pm.test(\"Verificando o email do usuário admin\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.email).to.eql(\"admin@divresid.com\");",
									"});",
									"",
									"pm.test(\"Verificando role do usuário admin\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.roles[0]).to.eql(\"ROLE_ADMIN\");",
									"});",
									"",
									"pm.test(\"Verificando o tokentype\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.tokenType).to.eql(\"Bearer\");",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"admin\",\n\t\"password\": \"12345678\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{urlSignin}}",
							"host": [
								"{{urlSignin}}"
							]
						},
						"description": "Requisição para logar com credenciais válidas e receber o token de autorização."
					},
					"response": []
				},
				{
					"name": "Login - Logando com um usuário moderador",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17e60494-b6e1-4840-b92b-bf21fa0d6f6a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var token = jsonData.accessToken;",
									"postman.setEnvironmentVariable(\"tokenMod\", token);",
									"",
									"",
									"pm.test(\"Verificando o username do usuário mod\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.username).to.eql(\"mod\");",
									"});",
									"",
									"pm.test(\"Verificando o email do usuário mod\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.email).to.eql(\"mod@divresid.com\");",
									"});",
									"",
									"pm.test(\"Verificando role do usuário mod\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.roles).contains(\"ROLE_MODERATOR\");",
									"});",
									"",
									"pm.test(\"Verificando o tokentype\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.tokenType).to.eql(\"Bearer\");",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"mod\",\n\t\"password\": \"12345678\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{urlSignin}}",
							"host": [
								"{{urlSignin}}"
							]
						},
						"description": "Requisição para logar com credenciais válidas e receber o token de autorização."
					},
					"response": []
				},
				{
					"name": "Login - Logando com um usuário comum",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17e60494-b6e1-4840-b92b-bf21fa0d6f6a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var token = jsonData.accessToken;",
									"postman.setEnvironmentVariable(\"tokenUser\", token);",
									"",
									"pm.test(\"Verificando o username do usuário comum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.username).to.eql(\"user\");",
									"});",
									"",
									"pm.test(\"Verificando o email do usuário comum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.email).to.eql(\"user@divresid.com\");",
									"});",
									"",
									"pm.test(\"Verificando role do usuário comum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.roles[0]).to.eql(\"ROLE_USER\");",
									"});",
									"",
									"pm.test(\"Verificando o tokentype\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.tokenType).to.eql(\"Bearer\");",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"user\",\n\t\"password\": \"12345678\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{urlSignin}}",
							"host": [
								"{{urlSignin}}"
							]
						},
						"description": "Requisição para logar com credenciais válidas e receber o token de autorização."
					},
					"response": []
				},
				{
					"name": "Login com credenciais inválidas",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0ce9812d-1f85-4488-8be2-ceb9c8179d5c",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Verificando a mensagem de retorno\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Error: Unauthorized\");",
									"});",
									"",
									"pm.test(\"Verificando erro\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"Unauthorized\");",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"admin\",\n\t\"password\": \"1234567\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{urlSignin}}",
							"host": [
								"{{urlSignin}}"
							]
						},
						"description": "Requisição com credenciais invalidas para checar o retorno de auth."
					},
					"response": []
				},
				{
					"name": "Acessando conteúdo restrito user com token admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "916ded66-9851-4f0c-b574-a25a87967d8a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/test/user",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"test",
								"user"
							]
						},
						"description": "Acessando o conteúdo restrito de user com token admin"
					},
					"response": []
				},
				{
					"name": "Acessando conteúdo restrito user com token user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "916ded66-9851-4f0c-b574-a25a87967d8a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenUser}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/test/user",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"test",
								"user"
							]
						},
						"description": "Acessando o conteúdo restrito de user com token admin"
					},
					"response": []
				},
				{
					"name": "Acessando conteúdo restrito user com token mod",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "916ded66-9851-4f0c-b574-a25a87967d8a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenMod}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/test/user",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"test",
								"user"
							]
						},
						"description": "Acessando o conteúdo restrito de user com token admin"
					},
					"response": []
				},
				{
					"name": "Acessando conteúdo restrito mod com token admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80344c63-b0bc-4bd3-b3cb-b945e7521f46",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/test/mod",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"test",
								"mod"
							]
						},
						"description": "Acessando conteúdo restrito de moderador com token de adminsitrador"
					},
					"response": []
				},
				{
					"name": "Acessando conteúdo restrito mod com token user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80344c63-b0bc-4bd3-b3cb-b945e7521f46",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenUser}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/test/mod",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"test",
								"mod"
							]
						},
						"description": "Acessando conteúdo restrito de moderador com token de adminsitrador"
					},
					"response": []
				},
				{
					"name": "Acessando conteúdo restrito mod com token mod",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80344c63-b0bc-4bd3-b3cb-b945e7521f46",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenMod}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/test/mod",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"test",
								"mod"
							]
						},
						"description": "Acessando conteúdo restrito de moderador com token de adminsitrador"
					},
					"response": []
				},
				{
					"name": "Acessando conteúdo restrido de admin com token admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6dfeebab-99e0-4084-80b7-cc5322e3f64c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/test/admin",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"test",
								"admin"
							]
						},
						"description": "Requisição para acessar conteúdo restrido do adminstrador com chave de mesmo nível"
					},
					"response": []
				},
				{
					"name": "Acessando conteúdo restrido de admin com token mod",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6dfeebab-99e0-4084-80b7-cc5322e3f64c",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenMod}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/test/admin",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"test",
								"admin"
							]
						},
						"description": "Requisição para acessar conteúdo restrido do adminstrador com chave de mesmo nível"
					},
					"response": []
				},
				{
					"name": "Acessando conteúdo restrido de admin com token user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6dfeebab-99e0-4084-80b7-cc5322e3f64c",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenUser}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/test/admin",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"test",
								"admin"
							]
						},
						"description": "Requisição para acessar conteúdo restrido do adminstrador com chave de mesmo nível"
					},
					"response": []
				}
			],
			"description": "Requisições de testes para criação e login JWT e Spring Security",
			"protocolProfileBehavior": {}
		},
		{
			"name": "2 - Categories",
			"item": [
				{
					"name": "1 - Criando Categoria",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24108390-1020-4b84-ad2f-1b0c955a8133",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var idCreated = jsonData.id;",
									"",
									"postman.setEnvironmentVariable(\"idCreated\", idCreated);",
									"",
									"pm.test(\"Verificando nome Categoria\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"Categoria teste Postman\");",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Categoria teste Postman\",\n\t\"description\": \"Cadastro para teste Postman\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{urlAuthApi}}categories",
							"host": [
								"{{urlAuthApi}}categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "2 - Buscando Categoria criada",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "845c47fc-660a-462c-bf74-1185b1dd2560",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verificando nome Categoria\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"Categoria teste Postman\");",
									"});",
									"",
									"pm.test(\"Verificando desrição Categoria\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.description).to.eql(\"Cadastro para teste Postman\");",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{urlAuthApi}}categories/{{idCreated}}",
							"host": [
								"{{urlAuthApi}}categories"
							],
							"path": [
								"{{idCreated}}"
							]
						},
						"description": "REquisição para buscar uma categoria por id"
					},
					"response": []
				},
				{
					"name": "3 - Listar Categorias",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d90e6436-2fd3-4cc6-82ce-c80286c61011",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test(\"A resposta é um array array\", function () {",
									"        pm.expect(pm.response.json()).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{urlAuthApi}}categories",
							"host": [
								"{{urlAuthApi}}categories"
							]
						},
						"description": "Requisição para listar todas as categorias cadastradas."
					},
					"response": []
				},
				{
					"name": "4 - Atualizar Categoria",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0404b3a4-289a-4404-9fc5-6129a984659e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verificando nome Categoria\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"Postman Teste Update name\");",
									"});",
									"",
									"pm.test(\"Verificando descrição Categoria\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.description).to.eql(\"Postman Teste Update description\");",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\":\"{{idCreated}}\",\n\t\"name\":\"Postman Teste Update name\",\n\t\"description\":\"Postman Teste Update description\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{urlAuthApi}}categories/{{idCreated}}",
							"host": [
								"{{urlAuthApi}}categories"
							],
							"path": [
								"{{idCreated}}"
							]
						},
						"description": "Requisição para atualizar uma categoria"
					},
					"response": []
				},
				{
					"name": "5 - Excluir Categoria",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "89fe457d-69b5-44b3-9e44-7bed81224da0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{urlAuthApi}}categories/{{idCreated}}",
							"host": [
								"{{urlAuthApi}}categories"
							],
							"path": [
								"{{idCreated}}"
							]
						},
						"description": "Requisição para excluir uma categoria por id"
					},
					"response": []
				}
			],
			"description": "Requisições apara tratar da entidade categoria.",
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{tokenUser}}",
						"type": "string"
					}
				]
			},
			"protocolProfileBehavior": {}
		},
		{
			"name": "3 - Entries",
			"item": [
				{
					"name": "1 - Criando Lançamento",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60cccdf1-022e-475e-9e89-7b56ff5801fd",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var idCreated = jsonData.id;",
									"",
									"postman.setEnvironmentVariable(\"idCreated\", idCreated);",
									"",
									"pm.test(\"Verificando nome do Lançamento\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"Lançamento Teste Postman\");",
									"});",
									"",
									"pm.test(\"Verificando a descrição do Lançamento\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.description).to.eql(\"Lançamento para teste\");",
									"});",
									"",
									"pm.test(\"Verificando o tipo do Lançamento\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.type).to.eql(\"expense\");",
									"});",
									"",
									"pm.test(\"Verificando o valor do Lançamento\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.amount).to.eql(123.50);",
									"});",
									"",
									"pm.test(\"Verificando a data do Lançamento\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.date).to.eql(\"2020-07-02\");",
									"});",
									"",
									"pm.test(\"Verificando o pago do Lançamento\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.paid).to.eql(false);",
									"});",
									"",
									"pm.test(\"Verificando a categoryId do Lançamento\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.categoryId).to.eql(1);",
									"});",
									"",
									"pm.test(\"Verificando o user id do Lançamento\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user.id).to.eql(1);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": null,  \n  \"name\": \"Lançamento Teste Postman\",\n  \"description\": \"Lançamento para teste\",\n  \"type\": \"expense\",\n  \"amount\": 123.50,\n  \"date\": \"2020-07-02\",\n  \"paid\": false,\n  \"categoryId\": 1,\n  \"category\":{\n      \"id\":1\n  },\n  \"user\": {\n    \"id\": 1\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{urlAuthApi}}entries",
							"host": [
								"{{urlAuthApi}}entries"
							]
						},
						"description": "Requisição para criar um Lançamento no sistema"
					},
					"response": []
				},
				{
					"name": "2 - Buscando Lançamento criado",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7ae34d91-0608-4bf5-a568-d5a66c903318",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verificando nome do Lançamento\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"Lançamento Teste Postman\");",
									"});",
									"",
									"pm.test(\"Verificando a descrição do Lançamento\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.description).to.eql(\"Lançamento para teste\");",
									"});",
									"",
									"pm.test(\"Verificando o tipo do Lançamento\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.type).to.eql(\"expense\");",
									"});",
									"",
									"pm.test(\"Verificando o valor do Lançamento\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.amount).to.eql(123.50);",
									"});",
									"",
									"pm.test(\"Verificando a data do Lançamento\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.date).to.eql(\"2020-07-02\");",
									"});",
									"",
									"pm.test(\"Verificando o pago do Lançamento\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.paid).to.eql(false);",
									"});",
									"",
									"pm.test(\"Verificando a categoryId do Lançamento\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.categoryId).to.eql(1);",
									"});",
									"",
									"pm.test(\"Verificando o user id do Lançamento\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user.id).to.eql(1);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{urlAuthApi}}entries/{{idCreated}}",
							"host": [
								"{{urlAuthApi}}entries"
							],
							"path": [
								"{{idCreated}}"
							]
						},
						"description": "Requisição para buscar um Lançamento"
					},
					"response": []
				},
				{
					"name": "3 - Listar Lançamentos",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f8b712c-25e2-4c6e-8a08-e4bce13a17ba",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test(\"A resposta é um array array\", function () {",
									"        pm.expect(pm.response.json()).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{urlAuthApi}}entries",
							"host": [
								"{{urlAuthApi}}entries"
							]
						},
						"description": "Requisição para listagem de Lançamentos"
					},
					"response": []
				},
				{
					"name": "4 - Atualizar Lançamento",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "afab44aa-8e5e-493c-accf-36c9ad587dd3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Verificando nome do Lançamento\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"Lançamento Teste Postman Update\");",
									"});",
									"",
									"pm.test(\"Verificando a descrição do Lançamento\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.description).to.eql(\"Lançamento para teste Update\");",
									"});",
									"",
									"pm.test(\"Verificando o tipo do Lançamento\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.type).to.eql(\"expense\");",
									"});",
									"",
									"pm.test(\"Verificando o valor do Lançamento\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.amount).to.eql(50);",
									"});",
									"",
									"pm.test(\"Verificando a data do Lançamento\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.date).to.eql(\"2020-07-02\");",
									"});",
									"",
									"pm.test(\"Verificando o pago do Lançamento\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.paid).to.eql(true);",
									"});",
									"",
									"pm.test(\"Verificando a categoryId do Lançamento\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.categoryId).to.eql(2);",
									"});",
									"",
									"pm.test(\"Verificando o user id do Lançamento\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user.id).to.eql(1);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{idCreated}}\",  \n  \"name\": \"Lançamento Teste Postman Update\",\n  \"description\": \"Lançamento para teste Update\",\n  \"type\": \"expense\",\n  \"amount\": 50,\n  \"date\": \"2020-07-02\",\n  \"paid\": true,\n  \"categoryId\": 2,\n  \"category\":{\n      \"id\":2\n  },\n  \"user\": {\n    \"id\": 1\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{urlAuthApi}}entries/{{idCreated}}",
							"host": [
								"{{urlAuthApi}}entries"
							],
							"path": [
								"{{idCreated}}"
							]
						},
						"description": "Requisição para atualizar um Lançamento"
					},
					"response": []
				},
				{
					"name": "5 - Excluir Lançamento",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9582cb8f-7866-4477-9e9c-a913423c72f4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{urlAuthApi}}entries/{{idCreated}}",
							"host": [
								"{{urlAuthApi}}entries"
							],
							"path": [
								"{{idCreated}}"
							]
						},
						"description": "Requisição para excluir Lançamento"
					},
					"response": []
				}
			],
			"description": "Requisições referentes a entidade Entry do sistema",
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{tokenAdmin}}",
						"type": "string"
					}
				]
			},
			"protocolProfileBehavior": {}
		},
		{
			"name": "4 - Property",
			"item": [
				{
					"name": "1 - Criando um Imóvel",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94995d8e-a9cf-4573-bf19-022bcb44f3df",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var idCreated = jsonData.id;",
									"",
									"postman.setEnvironmentVariable(\"idCreated\", idCreated);",
									"",
									"pm.test(\"Verificando nome do Imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"Imóvel de Teste Postman\");",
									"});",
									"",
									"pm.test(\"Verificando a descrição do Imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.description).to.eql(\"Imóvel usado para teste\");",
									"});",
									"",
									"pm.test(\"Verificando o nome do dono do Imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.landLordName).to.eql(\"Postman\");",
									"});",
									"",
									"pm.test(\"Verificando o telefone do dono do Imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.landLordPhone).to.eql(\"41999837800\");",
									"});",
									"",
									"pm.test(\"Verificando o CEP do Imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.zipCode).to.eql(\"80630200\");",
									"});",
									"",
									"pm.test(\"Verificando a rua do Imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.street).to.eql(\"Rua Postman\");",
									"});",
									"",
									"pm.test(\"Verificando o complemento do Imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.addressDetails).to.eql(\"Complemento Postman\");",
									"});",
									"",
									"pm.test(\"Verificando o número do Imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.number).to.eql(\"100\");",
									"});",
									"",
									"pm.test(\"Verificando a cidade do Imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.city).to.eql(\"Curitiba\");",
									"});",
									"",
									"pm.test(\"Verificando o estado da cidade do Imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.state).to.eql(\"Paraná\");",
									"});",
									"",
									"pm.test(\"Verificando o status do Imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.active).to.eql(true);",
									"});",
									"",
									"pm.test(\"Verificando o user id do Imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user.id).to.eql(1);",
									"});",
									"",
									"pm.test(\"Verificando o moradores do Imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.residents[0].id).to.eql(20);",
									"    pm.expect(jsonData.residents[1].id).to.eql(21);",
									"    pm.expect(jsonData.residents[2].id).to.eql(22);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": null,  \n  \"name\": \"Imóvel de Teste Postman\",\n  \"description\": \"Imóvel usado para teste\",\n  \"landLordName\": \"Postman\",\n  \"landLordPhone\": \"41999837800\",\n  \"zipCode\": \"80630200\",\n  \"street\": \"Rua Postman\",\n  \"addressDetails\": \"Complemento Postman\",\n  \"number\": \"100\",\n  \"city\": \"Curitiba\",\n  \"state\": \"Paraná\",\n  \"active\": true,\n  \"user\": {\n    \"id\": 1\n  },\n  \"residents\": [\n      {\"id\": 20},\n      {\"id\": 21},\n      {\"id\": 22}\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{urlAuthApi}}properties",
							"host": [
								"{{urlAuthApi}}properties"
							]
						},
						"description": "Requisição para cadastrar um imóvel."
					},
					"response": []
				},
				{
					"name": "2 - Buscando um Imóvel criado",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15e75c63-5c38-442f-9de1-30ce442409a4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var idCreated = jsonData.id;",
									"",
									"postman.setEnvironmentVariable(\"idCreated\", idCreated);",
									"",
									"pm.test(\"Verificando nome do Imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"Imóvel de Teste Postman\");",
									"});",
									"",
									"pm.test(\"Verificando a descrição do Imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.description).to.eql(\"Imóvel usado para teste\");",
									"});",
									"",
									"pm.test(\"Verificando o nome do dono do Imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.landLordName).to.eql(\"Postman\");",
									"});",
									"",
									"pm.test(\"Verificando o telefone do dono do Imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.landLordPhone).to.eql(\"41999837800\");",
									"});",
									"",
									"pm.test(\"Verificando o CEP do Imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.zipCode).to.eql(\"80630200\");",
									"});",
									"",
									"pm.test(\"Verificando a rua do Imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.street).to.eql(\"Rua Postman\");",
									"});",
									"",
									"pm.test(\"Verificando o complemento do Imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.addressDetails).to.eql(\"Complemento Postman\");",
									"});",
									"",
									"pm.test(\"Verificando o número do Imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.number).to.eql(\"100\");",
									"});",
									"",
									"pm.test(\"Verificando a cidade do Imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.city).to.eql(\"Curitiba\");",
									"});",
									"",
									"pm.test(\"Verificando o estado da cidade do Imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.state).to.eql(\"Paraná\");",
									"});",
									"",
									"pm.test(\"Verificando o status do Imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.active).to.eql(true);",
									"});",
									"",
									"pm.test(\"Verificando o user id do Imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user.id).to.eql(1);",
									"});",
									"",
									"pm.test(\"Verificando o moradores do Imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.residents[0].id).to.eql(20);",
									"    pm.expect(jsonData.residents[1].id).to.eql(21);",
									"    pm.expect(jsonData.residents[2].id).to.eql(22);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{urlAuthApi}}properties/{{idCreated}}",
							"host": [
								"{{urlAuthApi}}properties"
							],
							"path": [
								"{{idCreated}}"
							]
						},
						"description": "Requisição para buscar um imóvel por id"
					},
					"response": []
				},
				{
					"name": "3 - Listar Imóveis",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4bc2309e-4f40-4017-afda-39f736c1ffd1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test(\"A resposta é um array array\", function () {",
									"        pm.expect(pm.response.json()).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{urlAuthApi}}properties",
							"host": [
								"{{urlAuthApi}}properties"
							]
						},
						"description": "Requisição para listar imóveis cadastrados"
					},
					"response": []
				},
				{
					"name": "4 - Atualizar Imóvel",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ceb8d12-7c0a-4a7c-adc2-9486bff55a60",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var idCreated = jsonData.id;",
									"",
									"postman.setEnvironmentVariable(\"idCreated\", idCreated);",
									"",
									"pm.test(\"Verificando nome do Imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"Imóvel de Teste Postman Update\");",
									"});",
									"",
									"pm.test(\"Verificando a descrição do Imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.description).to.eql(\"Imóvel usado para teste Update\");",
									"});",
									"",
									"pm.test(\"Verificando o nome do dono do Imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.landLordName).to.eql(\"Postman\");",
									"});",
									"",
									"pm.test(\"Verificando o telefone do dono do Imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.landLordPhone).to.eql(\"41999837800\");",
									"});",
									"",
									"pm.test(\"Verificando o CEP do Imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.zipCode).to.eql(\"80630200\");",
									"});",
									"",
									"pm.test(\"Verificando a rua do Imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.street).to.eql(\"Rua Postman\");",
									"});",
									"",
									"pm.test(\"Verificando o complemento do Imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.addressDetails).to.eql(\"Complemento Postman\");",
									"});",
									"",
									"pm.test(\"Verificando o número do Imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.number).to.eql(\"100\");",
									"});",
									"",
									"pm.test(\"Verificando a cidade do Imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.city).to.eql(\"Curitiba\");",
									"});",
									"",
									"pm.test(\"Verificando o estado da cidade do Imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.state).to.eql(\"Paraná\");",
									"});",
									"",
									"pm.test(\"Verificando o status do Imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.active).to.eql(true);",
									"});",
									"",
									"pm.test(\"Verificando o user id do Imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user.id).to.eql(1);",
									"});",
									"",
									"pm.test(\"Verificando o moradores do Imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.residents[0].id).to.eql(20);",
									"    pm.expect(jsonData.residents[1].id).to.eql(21);",
									"    pm.expect(jsonData.residents[2].id).to.eql(22);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{idCreated}}\",  \n  \"name\": \"Imóvel de Teste Postman Update\",\n  \"description\": \"Imóvel usado para teste Update\",\n  \"landLordName\": \"Postman\",\n  \"landLordPhone\": \"41999837800\",\n  \"zipCode\": \"80630200\",\n  \"street\": \"Rua Postman\",\n  \"addressDetails\": \"Complemento Postman\",\n  \"number\": \"100\",\n  \"city\": \"Curitiba\",\n  \"state\": \"Paraná\",\n  \"active\": true,\n  \"user\": {\n    \"id\": 1\n  },\n  \"residents\": [\n      {\"id\": 20},\n      {\"id\": 21},\n      {\"id\": 22}\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{urlAuthApi}}properties/{{idCreated}}",
							"host": [
								"{{urlAuthApi}}properties"
							],
							"path": [
								"{{idCreated}}"
							]
						},
						"description": "Requisição para atualizar um imóvel cadastrado"
					},
					"response": []
				},
				{
					"name": "5 - Excluir Imóvel",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9368ca81-09ec-4491-8d86-1b891836066b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{urlAuthApi}}properties/{{idCreated}}",
							"host": [
								"{{urlAuthApi}}properties"
							],
							"path": [
								"{{idCreated}}"
							]
						},
						"description": "Requisição para excluir um imóvel cadastrado"
					},
					"response": []
				},
				{
					"name": "6 - Buscar imóvel ativo",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "763f918f-af8d-49cc-8078-aec266495fac",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verificando id de remetente\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.active).to.eql(true);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{urlAuthApi}}properties/currentActive?userId=1",
							"host": [
								"{{urlAuthApi}}properties"
							],
							"path": [
								"currentActive"
							],
							"query": [
								{
									"key": "userId",
									"value": "1"
								}
							]
						},
						"description": "Requisição para buscar o imóvel atual ativo de um usuário"
					},
					"response": []
				}
			],
			"description": "Requisições para testar end points de Properties.",
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{tokenAdmin}}",
						"type": "string"
					}
				]
			},
			"protocolProfileBehavior": {}
		},
		{
			"name": "5 - Invites",
			"item": [
				{
					"name": "1 - Criando Convite",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8fdb30e8-811e-4a66-b316-76e1fa5860c5",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var idCreated = jsonData.id;",
									"",
									"postman.setEnvironmentVariable(\"idCreated\", idCreated);",
									"",
									"pm.test(\"Verificando id de remetente\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.idFrom.id).to.eql(1);",
									"});",
									"",
									"pm.test(\"Verificando id de destinatário\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.idTo.id).to.eql(20);",
									"});",
									"",
									"pm.test(\"Verificando id de imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.idProperty.id).to.eql(68);",
									"});",
									"",
									"pm.test(\"Verificando status\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.accepted).to.eql(false);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": null,\n    \"idFrom\": {\n        \"id\": 1\n    },\n    \"idTo\": {\n        \"id\": 20\n    },\n    \"idProperty\": {\n        \"id\": 68\n    },\n    \"accepted\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{urlAuthApi}}invites",
							"host": [
								"{{urlAuthApi}}invites"
							]
						},
						"description": "Requisição para criar um convite"
					},
					"response": []
				},
				{
					"name": "2 - Buscando Convite criado",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "04270067-4c0b-4655-9f5e-f157bfcba1d5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verificando id de remetente\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.idFrom.id).to.eql(1);",
									"});",
									"",
									"pm.test(\"Verificando id de destinatário\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.idTo.id).to.eql(20);",
									"});",
									"",
									"pm.test(\"Verificando id de imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.idProperty.id).to.eql(68);",
									"});",
									"",
									"pm.test(\"Verificando status\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.accepted).to.eql(false);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{urlAuthApi}}invites/{{idCreated}}",
							"host": [
								"{{urlAuthApi}}invites"
							],
							"path": [
								"{{idCreated}}"
							]
						},
						"description": "Requisição para buscar um convite criado"
					},
					"response": []
				},
				{
					"name": "3 - Aceitar convite",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9c0ca893-6300-4b86-840f-90030fc7bd2a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verificando id de remetente\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.idFrom.id).to.eql(1);",
									"});",
									"",
									"pm.test(\"Verificando id de destinatário\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.idTo.id).to.eql(20);",
									"});",
									"",
									"pm.test(\"Verificando id de imóvel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.idProperty.id).to.eql(68);",
									"});",
									"",
									"pm.test(\"Verificando status\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.accepted).to.eql(true);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"{{idCreated}}\",\n    \"idFrom\": {\n        \"id\": 1\n    },\n    \"idTo\": {\n        \"id\": 20\n    },\n    \"idProperty\": {\n        \"id\": 68\n    },\n    \"accepted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{urlAuthApi}}invites/accept",
							"host": [
								"{{urlAuthApi}}invites"
							],
							"path": [
								"accept"
							]
						},
						"description": "Requisição para aceitar convite"
					},
					"response": []
				},
				{
					"name": "4 - Listar Convites",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8cf03fbe-c467-40d7-acc5-a6a766964858",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test(\"A resposta é um array array\", function () {",
									"        pm.expect(pm.response.json()).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{urlAuthApi}}invites",
							"host": [
								"{{urlAuthApi}}invites"
							]
						},
						"description": "Requisição para listar os convites cadastrados"
					},
					"response": []
				},
				{
					"name": "5 - Excluir Convite",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1c228541-f872-44c0-b2f8-0d5cd1bab5ca",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{urlAuthApi}}invites/{{idCreated}}",
							"host": [
								"{{urlAuthApi}}invites"
							],
							"path": [
								"{{idCreated}}"
							]
						},
						"description": "Requisição para excluir convite"
					},
					"response": []
				}
			],
			"description": "Requisições de convites para usários",
			"protocolProfileBehavior": {}
		},
		{
			"name": "6 - Residents",
			"item": [
				{
					"name": "1 - Buscar user por email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9910e3c-1b54-410f-962f-20ab5341c528",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verificando username do User\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.username).to.eql(\"admin\");",
									"});",
									"",
									"pm.test(\"Verificando o email do User\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.email).to.eql(\"admin@divresid.com\");",
									"});",
									"",
									"pm.test(\"Verificando o nome do User\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"Administrador\");",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{urlAuthApi}}residents/byEmail?email=admin@divresid.com",
							"host": [
								"{{urlAuthApi}}residents"
							],
							"path": [
								"byEmail"
							],
							"query": [
								{
									"key": "email",
									"value": "admin@divresid.com"
								}
							]
						},
						"description": "Requisição para buscar user por email para envio de convite"
					},
					"response": []
				}
			],
			"description": "Requisições para moradores de imóveis",
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}